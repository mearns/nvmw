#!/usr/bin/env bash
#
# nvmw - the nvm wrapper.
#
# Ensure that a specified version of nvm is installed, and then use it to
# ensure a specific version of nodejs is installed. Then execute the given
# arguments with the desired node version selected (i.e., following an `nvm
# use`).
#
# Specify the node version to install in a .nvmrc file, as usual with nvm, or
# alternatively with the NODE_VERSION environment variable (which supercedes
# any .nvmrc file).
#
# You can also specify which version of NVM to use, with the NVM_VERSION env
# var. Otherwise, a default value is used (hard-coded below). This can be any
# git revision specifier for the nvm repo (https://github.com/creationix/nvm),
# including things like "master" and "HEAD".
#
# For status messages, set the NODEW_DEBUG variable to "1".
#
# Everything is stored in the .nodew directory in the same directory as this
# script is located (NOT necessarily the working directory). Versions of the
# nvm.sh script are stored under there, and, when invoked through the nvm wrapper,
# is configured to use .nodew/nvm as the NVM directory; all versions of
# node and related tools (e.g., npm), plus all "globally" installed npm modules
# are stored there (assuming you use the wrapper to install them, like
# `./nvmw npm install MODULE_NAME -g`). If you want, you can change the location
# where nodew stores things by setting the NODEW_DIR env var. For instance, you
# could set it to a system wide location so that nodew and nvm cache everything
# in one location.
#
# Demo:
#
#   $ pwd
#   /tmp
#   $
#   $ # Make sure no previous nodew things are in the way,
#   $ # to get consistent output.
#   $ rm -rf .nodew
#   $ rm -f .nvmrc
#   $
#   $ # Specify which version of node we want to use, in the .nvmrc
#   $ echo "4.3.1" > .nvmrc
#   $
#   $ # Invoke node, using the wrapper.
#   $ # Neither nvm nor node is installed here yet, so they will both be installed first.
#   $ ./nvmw node --version
#   ######################################################################## 100.0%
#   Found '/tmp/.nvmrc' with version <4.3.1>
#   Downloading https://nodejs.org/dist/v4.3.1/node-v4.3.1-linux-x64.tar.xz...
#   ######################################################################## 100.0%
#   Now using node v4.3.1 (npm v2.14.12)
#   Creating default alias: default -> 4.3.1 (-> v4.3.1)
#   v4.3.1
#   $
#   $ # The version is installed now, it'll be quicker this time.
#   $ ./nvmw node --version
#   v4.3.1
#   $
#   $ # Override the version with the NODE_VERSION env var.
#   $ # The new version of node will be installed, but nvm is already installed.
#   $ NODE_VERSION=5.6.0 ./nvmw node --version
#   ######################################################################## 100.0%
#   Now using node v5.6.0 (npm v3.6.0)
#   v5.6.0
#   $
#   $ # Back to using nvmrc
#   $ ./nvmw node --version
#   v4.3.1
#   $
#   $ # And back to overridden version
#   $ NODE_VERSION=5.6.0 ./nvmw node --version
#   v5.6.0
#   $
#   $ # Install npm modules.
#   $ sudo ./nvmw npm install pm2 -g
#   npm WARN optional dep failed, continuing fsevents@1.0.7
#   /tmp/.nodew/nvm/versions/node/v4.3.1/bin/pm2 -> /tmp/.nodew/nvm/versions/node/v4.3.1/lib/node_modules/pm2/bin/pm2
#   /tmp/.nodew/nvm/versions/node/v4.3.1/bin/pm2-dev -> /tmp/.nodew/nvm/versions/node/v4.3.1/lib/node_modules/pm2/bin/pm2-dev
#   pm2@1.0.1 /tmp/.nodew/nvm/versions/node/v4.3.1/lib/node_modules/pm2
#   ├── ikt@0.0.0
#   ├── eventemitter2@0.4.14
#   ├── async@1.5.2
#   ├── pidusage@1.0.1
#   ├── semver@5.1.0
#   ├── commander@2.9.0 (graceful-readlink@1.0.1)
#   ├── coffee-script@1.10.0
#   ├── debug@2.2.0 (ms@0.7.1)
#   ├── pm2-deploy@0.2.1 (async@1.4.2, tv4@1.0.18)
#   ├── pm2-multimeter@0.1.2 (charm@0.1.2)
#   ├── vizion@0.2.12 (async@0.9.0)
#   ├── cli-table@0.3.1 (colors@1.0.3)
#   ├── pm2-axon@2.0.9 (amp-message@0.1.2, escape-regexp@0.0.1, amp@0.3.1, configurable@0.0.1)
#   ├── chalk@1.1.1 (escape-string-regexp@1.0.4, supports-color@2.0.0, ansi-styles@2.1.0, strip-ansi@3.0.0, has-ansi@2.0.0)
#   ├── shelljs@0.6.0
#   ├── pmx@0.5.9 (json-stringify-safe@5.0.1)
#   ├── mkdirp@0.5.1 (minimist@0.0.8)
#   ├── pm2-axon-rpc@0.3.6 (json-stringify-safe@5.0.1, commander@1.0.5)
#   ├── nssocket@0.6.0 (lazy@1.0.11)
#   ├── cron@1.1.0 (moment-timezone@0.3.1)
#   ├── moment@2.11.2
#   └── chokidar@1.4.2 (path-is-absolute@1.0.0, inherits@2.0.1, async-each@0.1.6, glob-parent@2.0.0, is-binary-path@1.0.1, is-glob@2.0.1, readdirp@2.0.0, anymatch@1.3.0)
#   $
#   $ # Now pm2 is installed, but only for the local version 4.3.0 of node.
#   $ ./nvmw pm2 --version
#   1.0.1
#   $
#   $ # It isn't installed for other versions of node.
#   $ NODE_VERSION=5.6.0 ./nvmw pm2 --version
#   ./nvmw: line 198: pm2: command not found
#   $
#   $ ./nvmw which pm2
#   /tmp/.nodew/nvm/versions/node/v4.3.1/bin/pm2
#
#
# Limits:
#
# You shouldn't generally use the nvm wrapper to execute nvm. It may work in
# particular cases, but, in particular, if you're overriding the node version
# with the NODE_VERSION env vars, nvm itself does not consider this.
#


# Find the location of this script.
DIR="$(command cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

if [ -z "${NODEW_DIR}" ]
then
  NODEW_DIR="${DIR}/.nodew"
fi

if [ -z "${NVM_VERSION}" ]
then
  NVM_VERSION="v0.31.0"
fi

if [ -z "${NODEW_DEBUG}" ]
then
  NODEW_DEBUG="0"
fi

# Used by all future invocations of nvm (in this script) to indicate where it should look for the
# installed node versions and other nvm maintained data.
NVM_DIR="${NODEW_DIR}/nvm"

# This is where we want to store and look for the specific version of nvm.
NVM_SH="${NODEW_DIR}/nvm-${NVM_VERSION}.sh"

##########################################################

# Set up a status-reporting function.
if [ "_${NODEW_DEBUG}" = "_1" ]
then
  status() {
    echo "NODEW: $1"
  }
else
  status() {
    :
  }
fi

# Error reporting function.
error() {
  >&2 echo "NODEW: ERROR: $1"
}

# Checks to see if a command $1 is executable. Exit code is 0 if it is, non-zero otherwise (command not found).
nodew_has() {
    type "$1" > /dev/null 2>&1
}

# Echos the URL for downloading nvm.sh of the specified revision ($1).
nodew_get_nvm_url() {
    echo "https://raw.githubusercontent.com/creationix/nvm/$1/nvm.sh"
}

# Echo the version of the nvm shell script specified in $1, assuming it exists.
# Non-zero exit code if file doesn't exist, for failed to get --version with it.
nodew_get_nvm_version() {
    _NVM_SH="$1"
    # Source the script and ask it for the version.
    _VERSION="$( . ${_NVM_SH} --no-use >/dev/null 2>&1 && nvm --version 2>/dev/null)"
    if [ $? -eq 0 ]
    then
        # That was successful, so just echo the version.
        echo "${_VERSION}"
    else
        # Sourcing the script, or asking it for the version failed.
        error "Failed to get version from ${_NVM_SH}"
        return 1;
    fi
}

# Check if NVM version matches the specified version.
# Get the version from the nvm.sh specified in $1, checks against the version specified in $2.
# Exit code 0 if we were able to get the version and it matched, otherwise non-zero (not a match
# or unknown).
nodew_test_nvm_version() {
    _NVM_SH="$1"
    _EXPECTED_VERSION="$2"

    _NVM_VERSION="$( nodew_get_nvm_version "$1" )"
    if [ $? -eq 0 ]
    then
        # Got the version successfully, check to see if it's correct.
        if [ "_${_NVM_VERSION}" = "_${_EXPECTED_VERSION}" ]
        then
            return 0
        fi
        # Version doesn't match
        return 1
    fi
    # Couldn't get version.
    return 1
}

# Download nvm.sh version $2 to location $1.
# Will use curl if available, otherwise wget. If neither
# is available, errs (returns non-zero exit code).
nodew_download_nvm() {
    _DEST="$1"
    _VERSION="$2"
    _URL="$(nodew_get_nvm_url ${_VERSION})"

    _DEST_DIR="$( dirname "${_DEST}" )"
    status "Ensuring destination directory exists: ${_DEST_DIR}"
    if ! mkdir -p "${_DEST_DIR}"
    then
      error "Failed to create destination directory."
      return 1
    fi

    if nodew_has "curl"
    then
        curl --progress-bar -q -o "${_DEST}" "${_URL}"
    elif nodew_has "wget"
    then
        wget --progress=bar -O "${_DEST}" "${_URL}"
    else
        error 'nodew requires curl or wget in order to install nvm.sh.'
        return 1
    fi
}

# Make sure the correct version ($2) of nvm is installed (at location $1), if possible.
# If it's not installed, it will attempt to download it.
# If the file is present, but doesn't appear to be the correct versin, will
# print an error message and exit with non-zero exit code.
nodew_ensure_nvm() {
    _NVM_SH="$1"
    _DESIRED_VERSION="$2"

    # See if it already exists with the correct version.
    if ! nodew_test_nvm_version ${_NVM_SH} ${_DESIRED_VERSION}
    then
        # Wrong version, or doesn't exist.
        if [ -f ${_NVM_SH} ]
        then
            # File did exist, but couldn't get matching version from it.
            error "${_NVM_SH} exists but does not appear to be version ${_DESIRED_VERSION}."
            return 1;
        else
            # File doesn't exist, so try to download it
            status "Required version of NVM does not exist. Downloading..."
            nodew_download_nvm ${_NVM_SH} ${_DESIRED_VERSION} || return $?
            status "NVM downloaded (${_NVM_SH})"
        fi
    fi
}

# Check to see if NVM has the specified version of node ($1) available for use.
# return zero if it does, non-zero if it doesn't. (or if any other error
# occurred attempting to run 'nvm use'.
#
# Assumes nvm.sh has already been sourced.
nodew_nvm_has_node_version() {
    _NODE_VERSION="$1"

    # See if it's possible to use the selected version.
    status "Checking for node version ${_NODE_VERSION}"

    # See if it works.
    if ! nvm use ${_NODE_VERSION} >/dev/null 2>&1
    then
      status "Failed to 'nvm use' requested version. Version may not be installed."
      return 1
    fi

}

########

# Make sure we have nvm installed.
status "Making sure NVM is installed and correct version."
nodew_ensure_nvm ${NVM_SH} ${NVM_VERSION} || exit $?

# Source nvm.sh
status "Sourcing NVM."
. "${NVM_SH}" --no-use

# See if the correct version of node is installed.
status "Checking for correct version of node."
if ! nodew_nvm_has_node_version $NODE_VERSION
then
  # Not installed, so install it.
  status "Desired version of node is not installed. Installing..."
  sudo su -c "NVM_DIR=$NVM_DIR . $NVM_SH --no-use && NVM_DIR=$NVM_DIR nvm install $NODE_VERSION" || exit 1
  status "...Node installed."
fi

# Use the version specified, and then execute the given arguments.
if [ "_${NODEW_DEBUG}" = "_1" ]
then
  nvm use $NODE_VERSION --delete-prefix && "$@"
else
  nvm use $NODE_VERSION --delete-prefix >/dev/null 2>&1 && "$@"
fi

